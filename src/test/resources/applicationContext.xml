<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:repository="http://www.springframework.org/schema/data/repository"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
    	http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository-1.6.xsd">
	
	
	<!-- | properties属性配置文件，替换bean定义中的${}占位符 + -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	<!-- | 扫描那些包, bean 注解注入 + -->
<!-- 	<context:component-scan base-package="com.nenglong.rrt.openapi"> -->
<!-- 		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
<!-- 	</context:component-scan> -->
	
	<jpa:repositories base-package="com.jingxin.test.dao" 
	    			factory-class="com.jingxin.framework.spring.jpa.NLSpringJpaRepositoryFactoryBean"
	    			repository-impl-postfix="Impl">
		<repository:include-filter type="annotation" 
		    		expression="com.jingxin.framework.spring.jpa.annotation.NLSpringJPA"/>
	</jpa:repositories>
	

	<!-- |data source durid连接池 + -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url">
			<value><![CDATA[${jdbc.url}]]></value>
		</property>
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<property name="initialSize" value="5"></property>
		<property name="minIdle" value="5"></property>
		<property name="maxActive" value="20"></property>
		
		 <!-- 配置获取连接等待超时的时间 -->
      	<property name="maxWait" value="10000" />
      	
		<!--校验连接是否有效sql-->
        <property name="validationQuery" value="${jdbc.preferredTestQuery}" />
        <property name="testWhileIdle" value="${jdbc.testConnectionOnIdle}" />
        <property name="testOnBorrow" value="${jdbc.testConnectionOnCheckout}" />
		<!--防止mysql在8小时后关闭连接导致连接数据库失败 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.maxIdleTime}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!--是否检查获取连接而不关闭连接的情况 -->
<!-- 		<property name="removeAbandoned" value="true" /> -->
		
<!-- 		<property name="filters" value="stat" /> -->
		
<!-- 		<property name="proxyFilters"> -->
<!-- 	        <list> -->
<!-- 	            <ref bean="log-filter"/> -->
<!-- 	        </list> -->
<!--     	</property> -->
	</bean>
	
<!-- 	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter"> -->
<!-- 	    <property name="statementExecutableSqlLogEnable" value="true" /> -->
<!-- 	</bean> -->


	<!-- |集成Spring 和 jpa（底层是hibernate） + -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" destroy-method="destroy">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="packagesToScan">
			<array>
				<value>com.jingxin.test.po</value>
			</array>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.connection.driver_class">${jdbc.driver}</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.generate_statistics">false</prop>
				<prop key="hibernate.use_sql_comments">false</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.jdbc.batch_size">20</prop>
				<prop key="hibernate.jdbc.fetch_size">20</prop>
				<prop key="hibernate.hbm2ddl.auto">none</prop>
				
			</props>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
	<!-- | 使用基于注解的事务控制，在需要事务的类或方法上使用@Transactional进行控制 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
